{
  "name": "memcache",
  "description": "simple memcache client",
  "version": "0.3.0",
  "homepage": "https://github.com/elbart/node-memcache",
  "repository": {
    "type": "git",
    "url": "git://github.com/elbart/node-memcache.git"
  },
  "author": {
    "name": "Tim Eggert",
    "email": "tim@elbart.com"
  },
  "main": "./lib/memcache",
  "devDependencies": {
    "expresso": ">=0.7.0"
  },
  "directories": {
    "lib": "lib",
    "test": "test"
  },
  "scripts": {
    "test": "make test",
    "test-cov": "make test-cov"
  },
  "engines": {
    "node": ">=0.6.0"
  },
  "keywords": [
    "memcache",
    "memcached"
  ],
  "readme": "node.js memcached client\n========================\n\nA pure-JavaScript memcached library for node.\n\n\nTests\n-----\n\nTo run the test suite, first insall <a href=\"http://github.com/visionmedia/expresso\">expresso</a>,\nthen run <code>make test</code>.\n\nIf you have <a href=\"http://github.com/visionmedia/node-jscoverage\">node-jscoverage</a> you can\nalso <code>make test-cov</code> for coverage, but that's pretty nerdy.\n\n\nUsage\n-----\n\nCreate a Client object to start working.\nHost and port can be passed to the constructor or set afterwards.\nThey have sensible defaults. \n\n\tvar memcache = require('./memcache');\n\n\tvar client = new memcache.Client(port, host);\n\tclient.port = 11211;\n\tclient.host = 'localhost';\n\nThe Client object emits 4 important events - connect, close, timeout and error.\n\n\tclient.on('connect', function(){\n\t\t// no arguments - we've connected\n\t});\n\n\tclient.on('close', function(){\n\t\t// no arguments - connection has been closed\n\t});\n\n\tclient.on('timeout', function(){\n\t\t// no arguments - socket timed out\n\t});\n\n\tclient.on('error', function(e){\n\t\t// there was an error - exception is 1st argument\n\t});\n\t\n\t// connect to the memcache server after subscribing to some or all of these events\n\tclient.connect()\n\nAfter connecting, you can start to make requests.\n\n\tclient.get('key', function(error, result){\n\n\t\t// all of the callbacks have two arguments.\n\t\t// 'result' may contain things which aren't great, but\n\t\t// aren't really errors, like 'NOT_STORED'\n\n\t});\n\n\tclient.set('key', 'value', function(error, result){\n\n\t\t// lifetime is optional. the default is\n\t\t// to never expire (0)\n\n\t}, lifetime);\n\n\tclient.delete('key', function(error, result){\n\n\t\t// delete a key from cache.\n\t});\n\n\tclient.version(function(error, result)){\n\n\t\t// grab the server version\n\t});\n\n\nThere are all the commands you would expect.\n\n\t// all of the different \"store\" operations\n\t// (lifetime & flags are both optional)\n\tclient.set(key, value, callback, lifetime, flags);\n\tclient.add(key, value, callback, lifetime, flags);\n\tclient.replace(key, value, callback, lifetime, flags);\n\tclient.append(key, value, callback, lifetime, flags);\n\tclient.prepend(key, value, callback, lifetime, flags);\n\tclient.cas(key, value, unique, callback, lifetime, flags);\n\n\t// increment and decrement (named differently to the server commands - for now!)\n\t// (value is optional, defaults to 1)\n\tclient.increment('key', value, callback);\n\tclient.decrement('key', value, callback);\n\n\t// statistics. the success argument to the callback\n\t// is a key=>value object\n\tclient.stats(callback);\n\tclient.stats('settings', callback);\n\tclient.stats('items', callback);\n\tclient.stats('mongeese', callback);\n\nOnce you're done, close the connection.\n\n\tclient.close();\n\nThere might be bugs. I'd like to know about them.\n\nI bet you also want to read the <a href=\"http://github.com/memcached/memcached/blob/master/doc/protocol.txt\">memcached \nprotocol doc</a>. It's exciting! It also explains possible error messages.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/elbart/node-memcache/issues"
  },
  "_id": "memcache@0.3.0",
  "_from": "memcache@*"
}
